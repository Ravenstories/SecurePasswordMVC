@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using SignalRClient.RSA;
@using System.Security.Cryptography;
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-2">User</div>
        <div class="col-4"><input @bind="userInput" type="text" id="userInput" /></div>
    </div>
    <div class="row">
        <div class="col-2">Message</div>
        <div class="col-4"><input @bind="messageInput" type="text" id="messageInput" /></div>
    </div>
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">
            <input type="button" @onclick="Send" disabled="@(IsConnected == false)" id="sendButton" value="Send Message" />
        </div>
        <div class="col-6">
            <input type="button" @onclick="OpenConnection" id="openConnection" value="OpenConnection" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>

<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private async Task OpenConnection()
    {
        RSACryptoServiceProvider RSA = new();
        var publicKey = RSA.ToXmlString(false);
        var privateKey = RSA.ExportParameters(true);
        Aes aes;
        aes = Aes.Create();
        bool encryptedConnection = false;

        hubConnection = new HubConnectionBuilder().WithUrl(NavManager.ToAbsoluteUri("/chathub")).WithAutomaticReconnect().Build();
        
        
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });
        

        hubConnection.On<string>("EncryptReply", (reply) =>
        {
            messages.Add($"Server: {reply}");

            if (reply == "Please Encrypt")
            {
                messages.Add($"Client: Sending Puplic Key");
                messages.Add($"Client: Sending Puplic Key - " + publicKey);
                hubConnection.InvokeAsync("Encrypt_Connection", publicKey);
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<byte[], byte[]>("Encrypt_EncSymKey", (aesKeyEncrypted, aesIVEncrypted) =>
        {
            Console.WriteLine("Invoking: EncryptReply");

            string formattedMessage = $"Client: Recieved AES Key - {Convert.ToBase64String(aesKeyEncrypted)}";
            messages.Add(formattedMessage);

            aes.Key = RSA_EncryptDecrypt.RSADecrypt(aesKeyEncrypted, privateKey, true);
            aes.IV = RSA_EncryptDecrypt.RSADecrypt(aesIVEncrypted, privateKey, true);

            InvokeAsync(StateHasChanged);
            Console.WriteLine("");
        });

        await hubConnection.StartAsync();

        if (hubConnection?.State == HubConnectionState.Connected)
        {
            messages.Add("Connection Established");

            await hubConnection.SendAsync("Encrypt");
        }

    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}